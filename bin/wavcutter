#!/usr/bin/perl -w
$|=1;
$rwsize=190;
print "\n";
#if (!$ARGV[0]) {print "Zu wenig Argumente angegeben.\n$0 -h für Optionen\n";exit 0};
if (!$ARGV[0]||$ARGV[0] eq '-h'||$ARGV[0] eq '-help'||$ARGV[0] eq '--help')
{
	die "With this tool you can edit WAV Files in the console.\n\nUsage: wavcutter <Option>=[VALUE]\n\n-h -help --help\t Shows this help.\n-i\t\t Terms the input file.\n-o\t\t Terms the output file.\n-c\t\t Determine the time that you want have in the new file.\n\t\t and it would be specefied like this:\n\t\t from(time)-to(time),from-to ... aso (float values are possible)\n\ne.g.:\twavcutter -i=input.wav -o=output.wav -c=10-00:15,1:21:23-02:18:24.7,10023.7-4:45:49,...\n\n";
}
if (!$ARGV[1]||!$ARGV[2]) 
{
	print 'Zu wenig Argumente angegeben.'."\n". "wavcutter -h für Optionen\n";
	exit -1;
}
foreach $argument (@ARGV)
{
	@arg=split( /=/,$argument);
	if ($arg[0] eq '-i'){$input=$arg[1];}
	elsif($arg[0] eq '-c'){$parts=$arg[1];}
	elsif($arg[0] eq'-o'){$output=$arg[1];}
}
print "Input: $input\n";
print "Cut: $parts\n";
print "Output: $output\n";
@cuts=split(/[\-\,]/,$parts);
$size = scalar(@cuts);
open(WRITE, ">$output")or die $!;
binmode(WRITE);
open(READ, "$input")or die $!;
binmode(READ);
seek(READ,24,0);
read(READ, $buffer, 4);

$tmp=substr($buffer,1,1);
$c2=$tmp;
$c1=ord $tmp;
$samplerate=sprintf "%x",$c1;
$tmp=substr($buffer,0,1);
$charsr="$tmp$c2";
$tmp=ord $tmp;
$samplerate.=sprintf "%x",$tmp;
$samplerate=sprintf hex $samplerate;
seek(READ,22,0);
read(READ, $channel, 2);

seek(READ,28,0);
read(READ, $bytespersec, 4);

seek(READ,32,0);
read(READ, $bytesps, 1);
$bytespersample=ord $bytesps;

seek(READ,34,0);
read(READ, $bitspersamp, 2);

$c=$bytespersample*$samplerate;
$riff=sprintf "\x52\x49\x46\x46";
#print "$charsr\n$bytepersample\n";exit;
$wave=sprintf "\x57\x41\x56\x45\x66\x6d\x74\x20\x10\x00\x00\x00\x01\x00".$channel.$charsr."\x00\x00".$bytespersec.$bytesps."\x00".$bitspersamp."\x64\x61\x74\x61";
print "Input hat $samplerate Hz\n";
#$wave=sprintf "\x57\x41\x56\x45\x66\x6d\x74\x20\x10\x00\x00\x00\x01\x00\x02\x00\x80\xBB\x00\x00\x00\xEE\x02\x00\x04\x00\x10\x00\x64\x61\x74\x61";
$lcut=$cuts[$size-1];
if($lcut=~ /:/)
{
	humantime($lcut);
}
else
{
	$lcut*=$c;
}
for($i=0; $i < $size;)
{
	if($cuts[$i]=~ /:/)
	{
		humantime($cuts[$i]);
	}
	else
	{
		$cuts[$i]*=$c;
	}
	seek(READ,$cuts[$i],0);
	$i++;
	if($cuts[$i]=~ /:/)
	{
		humantime($cuts[$i]);
	}
	else
	{
		$cuts[$i]*=$c;
	}
	$from=$cuts[$i-1];
	$to=$cuts[$i];
	
	while($to-$from > $rwsize*$c)
	{
		$per=$from/$lcut*100;
		printf <"    ===Progress===    	[ ""%3d %%""%s\r" >,$per," ]";
		read(READ, $buffer, $rwsize*$c);
		print WRITE $buffer;
		$from=$from+($rwsize*$c);
		seek(READ,0,1);
	}
	read(READ, $buffer, $to-$from);
	print WRITE $buffer;
	$i++;	
}
	printf <"    ===Progress===    	[ ""%3d %%""%s\r" >,100," ]";
$size=sprintf (-s "$output");
$string =sprintf ("%X", "$size");
&WORK;
$b="$at0$at1$at2$at3";
$string =sprintf ("%X", $size-36);
&WORK;
$a="$at0$at1$at2$at3";
$header="$riff$b$wave$a";
seek(WRITE,0,0);
print WRITE $header;
print "\n";

sub humantime
{
	@trans=split (/:/,$_[0]);
	$tm=scalar(@trans);
	if ($tm==3)
	{
		$_[0]=int((3600*$trans[0]+60*$trans[1]+$trans[2])*$c);
	}
	elsif ($tm==2)
	{
		$_[0]=int((60*$trans[0]+$trans[1])*$c);
	}
	else
	{
		die "\e[31mthe time format $_[0] is incorrect. Please correct\e[0m\n";
	}
	while($_[0] % 4 != 0)
	{
		$_[0]++;
	}


}

sub WORK
{
$length=length($string);
if($length==8)
{
$null=substr $string,$length-2,2;
$one=substr $string,$length -4,2;
$two=substr $string,$length -6,2;
$three=substr $string,$length -$length,2;
}
elsif($length==7)
{
$null=substr $string,$length-2,2;
$one=substr $string,$length -4,2;
$two=substr $string,$length -6,2;
$three=substr $string,$length -$length,1;
}
elsif($length==6)
{
$null=substr $string,$length-2,2;
$one=substr $string,$length -4,2;
$two=substr $string,$length -$length,2;
$three="00";
}
else
{
$null=substr $string,$length-2,2;
$one=substr $string,$length -4,2;
$two=substr $string,$length -$length,1;
$three="00";
}

use CGI;
$null = CGI::unescape (hex $null);
use CGI;
$one = CGI::unescape (hex $one);
use CGI;
$two = CGI::unescape (hex $two);
use CGI;
$three = CGI::unescape (hex $three);

$at0=sprintf ("%c","$null");
$at1=sprintf ("%c","$one");
$at2=sprintf ("%c","$two");
$at3=sprintf ("%c","$three");
}
